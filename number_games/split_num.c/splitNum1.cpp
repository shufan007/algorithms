/* ===========================================================================
 功能说明：此函数用来实现对任给的一个正整数m,把它拆分成 n个数的组合，求出组合方式和组合的个数。
   比如给一个数m=4，把它拆分成n=2个数之和，那么有1、3；2、2 这两种组合.
   输入要求：m>=n
  =============================================================================
-------------------------采用创建树结构的方式--------------------------------*/
#include<iostream>
#include<vector>
using namespace std;
//-----------------------------------------------------------------------------

void split_num1(int m,int n)
{
	cout<<"======================================================================\n"
		<<"---------------------------   功能说明   -----------------------------\n"
		<<"  对任给的一个正整数 m,把它拆成 n 个数的组合,求组合方式和组合的个数,  \n"
		<<"  比如给一个数 m=4，把它拆分成 n=2个数之和,那么有1,3；2,2 这两种组合. \n"
		<<"======================================================================\n\n";	
	if (n==1)    // -------处理 n==1 时直接输出m ---------------
	{
		cout<<m<<endl;
		cout<<"num= "<<1<<endl;
		return;
	}
	// -------------- n>1 时创建树结构 -------------------------
	// 创建标号向量
	//vector<int> c_value(n-1,0);   // 记录头结点到该结点的累积值（和标号）
	//vector<int> a(n,0);  // 树结点值标号,即每一层分配的数字
	const int N=100;
	int c_value[N];    //使用数组
	int a[N]; 
	for(int k=0;k<N;k++)
	{
		c_value[k]=0;
		a[k]=0;
	} 

	int num=0, p=0; 
	
	/* num 记录种类数，p 用来标记要扩展的起始结点位置
    从第1层开始创建，若本次分配成功，它指向当前结点，否则它指向上一结点*/
	int i,j,s;    // i用来指示当前层，s 指示当前分配的节点
	while (p>-1)  // 当p值回到-1说明整棵树的创建过程结束
	{             // 节点分配原则：下一层的数字不小于上一层
		a[p] = a[p]+1;
		c_value[p] = c_value[p]+1;
		for (i=p;i<n-1;i++)
		{
			s = m-c_value[i];   //分配当前节点值
			if (s>=a[i])        //当s>=a[i]时说明可以继续向下分配
				if (i==n-2)   // 本次可成功分配
				{
					a[i+1] = s;
					num =num+1;
					p = i;      // 修改 p 标号，下降到i层
					for (j=0;j<n;j++)  //输出本次结果
						cout<<a[j]<<" ";
					cout<<endl;
				}
				else  //若本层分配成功但尚未到达末层，
				{     //修改下一层节点标号，及累计值标号
					a[i+1]=a[i];    // 本层节点值赋给下一层
					c_value[i+1]=c_value[i]+a[i];  
				}
			else    //当s<a[i]时,本次分配不成功，p上升一层
				p=p-1;   			
		}
	}
	cout<<endl<<"total number: "<<num<<endl<<endl;
}//----------------------------------------------------------------------------------
